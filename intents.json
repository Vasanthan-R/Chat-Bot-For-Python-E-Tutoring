{"intents": [
        {"tag": "greeting",
         "patterns": ["Hi there", "How are you", "Is anyone there?","Hey","Hola", "Hello", "Good day"],
         "responses": ["Hello, thanks for asking", "Good to see you again", "Hi there, how can I help?"],
         "context": [""]
        },
        {"tag": "goodbye",
         "patterns": ["Bye", "See you later", "Goodbye", "Nice chatting to you, bye", "Till next time"],
         "responses": ["See you!", "Have a nice day", "Bye! Come back again soon."],
         "context": [""]
        },
        {"tag": "thanks",
         "patterns": ["Thanks", "Thank you", "That's helpful", "Awesome, thanks", "Thanks for helping me"],
         "responses": ["Happy to help!", "Any time!", "My pleasure"],
         "context": [""]
        },
        {"tag": "noanswer",
         "patterns": [],
         "responses": ["Sorry, can't understand you", "Please give me more info", "Not sure I understand"],
         "context": [""]
        },
        {"tag": "options",
         "patterns": ["How you could help me?", "What you can do?", "What help you provide?", "How you can be helpful?", "What support is offered"],
         "responses": ["I can guide you through debugging errors and answer various questions related to python", "Offering support for debugging errors and clarify basic questions on python"],
         "context": [""]
        },
        {"tag": "error1",
         "patterns": ["Missing parentheses in call to 'print'","Missing parentheses in call to 'print'"],
         "responses": ["Include paranthesis for print. \n print('hello')"],
         "context": [""]
        },
	{"tag": "error2",
         "patterns": ["TypeError","unsupported operand type(s) for -: 'str' and 'int'"],
         "responses": ["Input by default is returned as string.\nUse int(input()) to typecase to int."],
         "context": [""]
        },
	{"tag": "error3",
         "patterns": ["SyntaxError: invalid syntax"],
         "responses": ["Missing semicolon for if,for,while,etc\nif a==2:\n\tprint(a)"],
         "context": [""]
        },
	{"tag": "error4",
         "patterns": ["SyntaxError","int a=2^ SyntaxError: invalid syntax","char c='a'^ SyntaxError: invalid syntax","int","char","float","string","double"],
         "responses": ["Need not declare with a datatype in python. Just say\na=2\na='string'\nk=9.90"],
         "context": [""]
        },
	{"tag": "error5",
         "patterns": ["undefined reference to `print(int)'","undefined reference to `func(int,char)'","undefined reference to `check(string,int,char)'"],
         "responses": ["You misspelled the name of the function","Incorrect parameter list"],
         "context": [""]
        },
	{"tag": "error6",
         "patterns": ["NameError","name 'i' is not defined","name 'a' is not defined","name 'y' is not defined","name 'x' is not defined"],
         "responses": ["Tnitialize the variable or look for misspelling."],
         "context": [""]
        },
	{"tag": "error7",
         "patterns": ["IndexError","list index out of range"],
         "responses": ["list index starts from zero. The index mentioned is out of range.\nL=[1,2,3]\nL[0]=2\n"],
         "context": [""]
        },
	{"tag": "error8",
         "patterns": ["No module named"],
         "responses": ["pip install <module_name>"],
         "context": [""]
        },
	{"tag": "error9",
         "patterns": ["KeyError"],
         "responses": ["The key is not present in the dictionary."],
         "context": [""]
        },
	{"tag": "error10",
         "patterns": ["â€˜StopIteration","next()"],
         "responses": ["next() function goes beyond the iterator items"],
         "context": [""]
        },
	{"tag": "error11",
         "patterns": ["invalid literal for int() with base 10: 'xyz' "],
         "responses": ["Typecasing str to int is not allowed."],
         "context": [""]
        },
	{"tag": "error12",
         "patterns": ["KeyboardInterrupt "],
         "responses": ["when you hit CTRL+C, the program stops executing."],
         "context": [""]
        },
	{"tag": "error13",
         "patterns": ["IndendationError","expected an indented block"],
         "responses": ["If and loops need an indented block. \nfor i in range(8):\n\tprint(i)"],
         "context": [""]
        }
   ]
}
